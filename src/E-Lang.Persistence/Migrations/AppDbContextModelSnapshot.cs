// <auto-generated />
using System;
using E_Lang.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace E_Lang.Persistence.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("E_Lang.Domain.Entities.Collection", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.HasIndex("ParentId");

                    b.HasIndex(new[] { "Id", "ParentId" }, "Collection_Id_ParentId");

                    b.ToTable("Collections");
                });

            modelBuilder.Entity("E_Lang.Domain.Entities.Flashcard", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CollectionId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("FlashcardBaseId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("LastSeenOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("LastStatusChangedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CollectionId");

                    b.HasIndex("FlashcardBaseId");

                    b.HasIndex(new[] { "Id", "OwnerId" }, "Flashcard_Id_OwnerId");

                    b.ToTable("Flashcards");
                });

            modelBuilder.Entity("E_Lang.Domain.Entities.FlashcardBase", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("WordOrPhrase")
                        .IsRequired()
                        .HasMaxLength(10000)
                        .HasColumnType("character varying(10000)");

                    b.HasKey("Id");

                    b.ToTable("FlashcardBase");
                });

            modelBuilder.Entity("E_Lang.Domain.Entities.Meaning", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("FlashcardBaseId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(10000)
                        .HasColumnType("character varying(10000)");

                    b.HasKey("Id");

                    b.HasIndex("FlashcardBaseId");

                    b.ToTable("Meaning");
                });

            modelBuilder.Entity("E_Lang.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Email" }, "User_Email")
                        .IsUnique();

                    b.HasIndex(new[] { "Id" }, "User_Id");

                    b.HasIndex(new[] { "UserName" }, "User_UserName")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("E_Lang.Domain.Entities.Collection", b =>
                {
                    b.HasOne("E_Lang.Domain.Entities.Collection", "Parent")
                        .WithMany("Subcollections")
                        .HasForeignKey("ParentId");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("E_Lang.Domain.Entities.Flashcard", b =>
                {
                    b.HasOne("E_Lang.Domain.Entities.Collection", "Collection")
                        .WithMany("Flashcards")
                        .HasForeignKey("CollectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("E_Lang.Domain.Entities.FlashcardBase", "FlashcardBase")
                        .WithMany()
                        .HasForeignKey("FlashcardBaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Collection");

                    b.Navigation("FlashcardBase");
                });

            modelBuilder.Entity("E_Lang.Domain.Entities.Meaning", b =>
                {
                    b.HasOne("E_Lang.Domain.Entities.FlashcardBase", "FlashcardBase")
                        .WithMany("Meanings")
                        .HasForeignKey("FlashcardBaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FlashcardBase");
                });

            modelBuilder.Entity("E_Lang.Domain.Entities.Collection", b =>
                {
                    b.Navigation("Flashcards");

                    b.Navigation("Subcollections");
                });

            modelBuilder.Entity("E_Lang.Domain.Entities.FlashcardBase", b =>
                {
                    b.Navigation("Meanings");
                });
#pragma warning restore 612, 618
        }
    }
}
